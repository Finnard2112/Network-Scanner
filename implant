#!/usr/bin/env python3

import struct
import netifaces
from netaddr import *
import socket
import threading
from queue import Queue

interfaces = netifaces.interfaces()
hosts = {}

print_lock = threading.Lock()

def threader():
    while True:
        port = q.get()
        tcp_scan(port)
        q.task_done()

def tcp_scan(port):
    try:
        # Create AF_INET socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.settimeout(0.3) # Fast timeout?
        sock.connect((dest_ip,port))

        # Receive some data for service identification
        banner = sock.recv(2048)
        banner = banner.decode()

        with print_lock:
            print(f"Banner is: {banner}")

            if banner.startswith('SSH-'):
                print(f"SSH detected on port {port}")
            elif banner.startswith('220'):
                print(f"FTP detected on port {port}")
            else:
                print(f"Other service detected")
        return 0
    except Exception as e:
        pass
    finally:
        sock.close()

for interface in interfaces:
    if interface != 'lo' and interface != 'eth1':
        # ARP Host discovery

        hosts[interface] = []
        sock = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0003))
        sock.settimeout(0.1)
        sock.bind((interface,0))
        # Getting the interfaces on the current computer
        addrs = netifaces.ifaddresses(interface)
        # Getting the first address of the returned list (assuming no multiple address in an interface)
        MAC_addr = addrs[netifaces.AF_LINK][0]
        IP4_addr = addrs[netifaces.AF_INET][0]
        # Getting the Network IP.
        my_ip = IPAddress(IP4_addr['addr'])
        netmask = IPAddress(IP4_addr['netmask'])
        network_ip = IPAddress((int(my_ip) & int(netmask)))
        # Convert network IPAddress to IPNetwork
        network_ip = IPNetwork(network_ip)
        network_ip.netmask = netmask

        # Destination is Broadcast
        ethernet_header = bytes.fromhex('ff:ff:ff:ff:ff:ff'.replace(":", ""))
        # Source is current MAC addr
        ethernet_header += bytes.fromhex(MAC_addr['addr'].replace(":", ""))
        ethernet_header += b'\x08\x06' # ARP Protocol

        arp_header = b'\x00\x01\x08\x00\x06\x04' # Hardware/Protocol type/length

        # Optional: Ends the scan early. 
        count = 10 # Scan the first 10 IPs. Otherwise set to a really big number.

        # Iterate over every usable IP address in current subnet
        cur_ip = IPAddress(int(network_ip.ip) + 1)
        while cur_ip != network_ip.broadcast:
            if count > 0:
                arp_data = arp_header + b'\x00\x01' # Request opcode
                arp_data += bytes.fromhex(MAC_addr['addr'].replace(":", "")) # Source MAC addr
                arp_data += socket.inet_aton(str(my_ip)) # Source IP
                arp_data += b'\x00\x00\x00\x00\x00\x00' # Zeroed out in a request
                arp_data += socket.inet_aton(str(cur_ip)) # Requested IP address
                print("\nRequested IP: " + str(cur_ip))

                frame = ethernet_header + arp_data # The entire ethernet frame

                sock.send(frame) # send the frame
                
                try: # try to receive a response immediately. The timeout is 1 second
                    received = 0
                    while received < 3:
                        response = sock.recv(4096)
                        header = struct.unpack("!6s6sH", response[0:14])
                        if header[2] == 0x0806: # The protocol is ARP
                            print ("SUCCESSFULLY RECEIVED A RESPONSE")
                            *_, sha, spa, tha, tpa = struct.unpack('2s2s1s1s2s6s4s6s4s', response[14:42])
                            sha = ':'.join(format(byte, '02x') for byte in sha) # Convert MAC Address to string
                            spa = socket.inet_ntoa(spa) # Convert IP address to string
                            print("Host discovered. MAC Address: " + sha + ". IP address: " + spa)
                            hosts[interface].append({'IP': spa, 'MAC': sha})
                            break
                        received += 1
                    if received == 3:
                        print("Didn't receive an ARP response within 3 packets")
                except socket.timeout:
                    print("Timed out waiting for data")
                except Exception as e:
                    print(f"An error occurred when trying to recv (not timeout): {e}")
                    print("continuing to scan for other IPs")
                cur_ip = IPAddress(int(cur_ip) + 1)
                count -= 1
            else:
                break

        
        # Add current machine to interface
        # hosts[interface].append({'IP': str(my_ip), 'MAC': MAC_addr['addr']})

        # Close PF_PACKET socket
        sock.close()

        source_ip = str(my_ip)

        print(hosts)

        for host in hosts[interface]:
            dest_ip = host['IP']
            print(f"Scanning host {dest_ip}")
            q = Queue()
            for port in range(1, 65536):
                q.put(port)
            for x in range(5):
                thread = threading.Thread(target=threader)
                thread.daemon = True
                thread.start()
            q.join()

